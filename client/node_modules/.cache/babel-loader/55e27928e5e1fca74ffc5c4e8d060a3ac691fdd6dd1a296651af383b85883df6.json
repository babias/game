{"ast":null,"code":"// ChatRoom.js\nimport React,{useState,useRef,useEffect}from'react';import{io}from'socket.io-client';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const ChatRoom=()=>{const[messages,setMessages]=useState([]);const[inputMessage,setInputMessage]=useState('');const[username,setUsername]=useState('');const[userCount,setUserCount]=useState(0);const[connected,setConnected]=useState(false);const inputRef=useRef(null);const socket=useRef(null);useEffect(()=>{// Connect to the Socket.IO server when the user is connected\nif(connected){socket.current=io('http://localhost:3001');// Handle incoming messages from the server\nsocket.current.on('message',newMessage=>{setMessages(prevMessages=>[...prevMessages,newMessage]);});// Handle updated user count from the server\nsocket.current.on('userCount',count=>{setUserCount(count);});// Clean up the Socket.IO connection when the component unmounts\nreturn()=>{socket.current.disconnect();};}},[connected]);const handleConnect=()=>{// Allow the user to connect only if a username is provided\nif(username.trim()!==''){setConnected(true);}};const handleSendMessage=()=>{if(inputMessage.trim()!==''&&username.trim()!==''){const newMessage={username,text:inputMessage};// Send the message to the server\nsocket.current.emit('message',newMessage);setInputMessage('');inputRef.current.focus();}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Chat Room\"}),!connected&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"Enter your username to join:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Enter your username\",value:username,onChange:e=>setUsername(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{onClick:handleConnect,children:\"Join\"})]}),connected&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Number of Users: \",userCount]}),/*#__PURE__*/_jsx(\"div\",{style:{height:'200px',border:'1px solid #ccc',padding:'10px',overflowY:'scroll'},children:messages.map((message,index)=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[message.username,\":\"]}),\" \",message.text]},index))}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'10px'},children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Type your message\",value:inputMessage,onChange:e=>setInputMessage(e.target.value),ref:inputRef}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSendMessage,children:\"Send\"})]})]})]});};export default ChatRoom;","map":{"version":3,"names":["React","useState","useRef","useEffect","io","jsx","_jsx","jsxs","_jsxs","ChatRoom","messages","setMessages","inputMessage","setInputMessage","username","setUsername","userCount","setUserCount","connected","setConnected","inputRef","socket","current","on","newMessage","prevMessages","count","disconnect","handleConnect","trim","handleSendMessage","text","emit","focus","children","type","placeholder","value","onChange","e","target","onClick","style","height","border","padding","overflowY","map","message","index","marginTop","ref"],"sources":["C:/Users/14022/Desktop/adventuregame/src/ChatRoom.js"],"sourcesContent":["// ChatRoom.js\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst ChatRoom = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [userCount, setUserCount] = useState(0);\r\n  const [connected, setConnected] = useState(false);\r\n  const inputRef = useRef(null);\r\n  const socket = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Connect to the Socket.IO server when the user is connected\r\n    if (connected) {\r\n      socket.current = io('http://localhost:3001');\r\n\r\n      // Handle incoming messages from the server\r\n      socket.current.on('message', (newMessage) => {\r\n        setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n      });\r\n\r\n      // Handle updated user count from the server\r\n      socket.current.on('userCount', (count) => {\r\n        setUserCount(count);\r\n      });\r\n\r\n      // Clean up the Socket.IO connection when the component unmounts\r\n      return () => {\r\n        socket.current.disconnect();\r\n      };\r\n    }\r\n  }, [connected]);\r\n\r\n  const handleConnect = () => {\r\n    // Allow the user to connect only if a username is provided\r\n    if (username.trim() !== '') {\r\n      setConnected(true);\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    if (inputMessage.trim() !== '' && username.trim() !== '') {\r\n      const newMessage = {\r\n        username,\r\n        text: inputMessage,\r\n      };\r\n\r\n      // Send the message to the server\r\n      socket.current.emit('message', newMessage);\r\n\r\n      setInputMessage('');\r\n      inputRef.current.focus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h4>Chat Room</h4>\r\n      {!connected && (\r\n        <div>\r\n          <p>Enter your username to join:</p>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter your username\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n          />\r\n          <button onClick={handleConnect}>Join</button>\r\n        </div>\r\n      )}\r\n      {connected && (\r\n        <div>\r\n          <p>Number of Users: {userCount}</p>\r\n          <div style={{ height: '200px', border: '1px solid #ccc', padding: '10px', overflowY: 'scroll' }}>\r\n            {messages.map((message, index) => (\r\n              <div key={index}>\r\n                <strong>{message.username}:</strong> {message.text}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div style={{ marginTop: '10px' }}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Type your message\"\r\n              value={inputMessage}\r\n              onChange={(e) => setInputMessage(e.target.value)}\r\n              ref={inputRef}\r\n            />\r\n            <br />\r\n            <button onClick={handleSendMessage}>Send</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}