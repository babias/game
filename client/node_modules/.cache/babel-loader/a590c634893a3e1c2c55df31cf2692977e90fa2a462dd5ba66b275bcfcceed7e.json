{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\14022\\\\Desktop\\\\adventure-game\\\\adventure-game-C13\\\\src\\\\components\\\\TextAdventureGame.js\",\n  _s = $RefreshSig$();\n// TextAdventureGame.js\nimport React, { useState, useEffect } from 'react';\nimport './Inventory.css';\nimport Scene from './Scene';\nimport GameOver from './GameOver';\nimport './Health.css';\nimport Inventory from './Inventory';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextAdventureGame = () => {\n  _s();\n  const [inventory, setInventory] = useState([]);\n  const [currentSceneIndex, setCurrentSceneIndex] = useState(0);\n  const [health, setHealth] = useState(50);\n  const [gameOver, setGameOver] = useState(false);\n  const addToInventory = item => {\n    setInventory(prevInventory => [...prevInventory, item]);\n  };\n  const handleChoice = (choiceIndex, damage) => {\n    if (gameOver) return;\n    const choice = scenes[currentSceneIndex].choices[choiceIndex];\n    const nextSceneIndex = choice.nextSceneIndex;\n\n    // Check if the choice has an item and add it to the inventory\n    if (choice.item) {\n      addToInventory(choice.item);\n      handleItemChoice(choice.item); // Add this line to call handleItemChoice\n    }\n    if (choice.damage) {\n      const newHealth = Math.max(0, health - choice.damage);\n      setHealth(newHealth);\n      if (newHealth === 0) {\n        setGameOver(true);\n      }\n    }\n    setCurrentSceneIndex(nextSceneIndex);\n  };\n  const handleItemChoice = item => {\n    // Check if the item is the key and it's not already in the inventory\n    if (item === 'Key' && !inventory.includes('Key')) {\n      addToInventory('Key');\n    } else if (item === 'Key' && inventory.includes('Key')) {\n      // Display a message indicating that the key is already in the inventory\n      alert('You already have the Key!');\n    }\n    // Add more conditions for other items if needed\n  };\n  const restartGame = () => {\n    setHealth(50);\n    setGameOver(false);\n    setCurrentSceneIndex(0);\n    setInventory([]);\n  };\n  const currentScene = scenes[currentSceneIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inventory-container\",\n      children: /*#__PURE__*/_jsxDEV(Inventory, {\n        items: inventory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scene-container\",\n      children: [gameOver && /*#__PURE__*/_jsxDEV(GameOver, {\n        onRestart: restartGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Room \", Math.floor(currentSceneIndex / 4) + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"health-container\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: `health ${health <= 30 ? 'low-health' : ''}`,\n          children: [\"Health: \", health]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Scene, {\n        scene: currentScene,\n        onChoice: handleChoice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(TextAdventureGame, \"FXd4Z/TTUJ6ID/zKA95uWnTxCss=\");\n_c = TextAdventureGame;\nconst scenes = [{\n  description: 'Scene 1 in Room 1 MAIN\\nYou stand in a peculiar room... (your starting scene)',\n  image: '/images/mainroom.jpg',\n  choices: [{\n    text: 'Choice 1 - \"Examine the contents of the desk drawer.\"',\n    nextSceneIndex: 1\n  }, {\n    text: 'Choice 2 - \"Carefully look under the couch for any hidden items or clues\"',\n    nextSceneIndex: 3\n  }, {\n    text: 'Choice 3 - \"Take a nap, wait for a miracle. DAMAGE\"',\n    nextSceneIndex: 2,\n    damage: 20\n  }]\n}, {\n  description: 'Scene 2 in Room 1 Watch <br> \"A watch... hmmm, I bet this is somehow important.\"',\n  image: '/images/watch.jpg',\n  choices: [{\n    text: 'GO to Main Room',\n    nextSceneIndex: 0\n  }]\n}, {\n  description: 'Scene 3 in Room 1 DEAD <br> \"Still waiting to be found....\"',\n  image: '/images/skeleton.jpg',\n  choices: [{\n    text: 'GO to Main Room',\n    nextSceneIndex: 0\n  }]\n}, {\n  description: 'Scene 4 in Room 1 KEY <br> \"FOUND IT! That was easy, let\\'s get out of here.\"',\n  image: '/images/key.jpg',\n  choices: [{\n    text: 'GO to Main Room',\n    nextSceneIndex: 0\n  }, {\n    text: 'Take the KEY',\n    nextSceneIndex: 2,\n    item: 'Key'\n  }]\n}];\nexport default TextAdventureGame;\nvar _c;\n$RefreshReg$(_c, \"TextAdventureGame\");","map":{"version":3,"names":["React","useState","useEffect","Scene","GameOver","Inventory","jsxDEV","_jsxDEV","TextAdventureGame","_s","inventory","setInventory","currentSceneIndex","setCurrentSceneIndex","health","setHealth","gameOver","setGameOver","addToInventory","item","prevInventory","handleChoice","choiceIndex","damage","choice","scenes","choices","nextSceneIndex","handleItemChoice","newHealth","Math","max","includes","alert","restartGame","currentScene","className","children","items","fileName","_jsxFileName","lineNumber","columnNumber","onRestart","floor","scene","onChoice","_c","description","image","text","$RefreshReg$"],"sources":["C:/Users/14022/Desktop/adventure-game/adventure-game-C13/src/components/TextAdventureGame.js"],"sourcesContent":["// TextAdventureGame.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport './Inventory.css';\r\nimport Scene from './Scene';\r\nimport GameOver from './GameOver';\r\nimport './Health.css';\r\nimport Inventory from './Inventory';\r\n\r\nconst TextAdventureGame = () => {\r\n  const [inventory, setInventory] = useState([]);\r\n  const [currentSceneIndex, setCurrentSceneIndex] = useState(0);\r\n  const [health, setHealth] = useState(50);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const addToInventory = (item) => {\r\n    setInventory((prevInventory) => [...prevInventory, item]);\r\n  };\r\n\r\n  const handleChoice = (choiceIndex, damage) => {\r\n    if (gameOver) return;\r\n  \r\n    const choice = scenes[currentSceneIndex].choices[choiceIndex];\r\n    const nextSceneIndex = choice.nextSceneIndex;\r\n  \r\n    // Check if the choice has an item and add it to the inventory\r\n    if (choice.item) {\r\n      addToInventory(choice.item);\r\n      handleItemChoice(choice.item); // Add this line to call handleItemChoice\r\n    }\r\n  \r\n    if (choice.damage) {\r\n      const newHealth = Math.max(0, health - choice.damage);\r\n      setHealth(newHealth);\r\n  \r\n      if (newHealth === 0) {\r\n        setGameOver(true);\r\n      }\r\n    }\r\n  \r\n    setCurrentSceneIndex(nextSceneIndex);\r\n  };\r\n\r\n  const handleItemChoice = (item) => {\r\n    // Check if the item is the key and it's not already in the inventory\r\n    if (item === 'Key' && !inventory.includes('Key')) {\r\n      addToInventory('Key');\r\n    } else if (item === 'Key' && inventory.includes('Key')) {\r\n      // Display a message indicating that the key is already in the inventory\r\n      alert('You already have the Key!');\r\n    }\r\n    // Add more conditions for other items if needed\r\n  };\r\n  \r\n\r\n  const restartGame = () => {\r\n    setHealth(50);\r\n    setGameOver(false);\r\n    setCurrentSceneIndex(0);\r\n    setInventory([]);\r\n  };\r\n\r\n  const currentScene = scenes[currentSceneIndex];\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <div className=\"inventory-container\">\r\n        <Inventory items={inventory} />\r\n      </div>\r\n      <div className=\"scene-container\">\r\n        {gameOver && <GameOver onRestart={restartGame} />}\r\n        <h3>Room {Math.floor(currentSceneIndex / 4) + 1}</h3>\r\n        <div className=\"health-container\">\r\n          <h2 className={`health ${health <= 30 ? 'low-health' : ''}`}>Health: {health}</h2>\r\n        </div>\r\n        <Scene scene={currentScene} onChoice={handleChoice} />\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nconst scenes = [\r\n  {\r\n    description: 'Scene 1 in Room 1 MAIN\\nYou stand in a peculiar room... (your starting scene)',\r\n    image: '/images/mainroom.jpg',\r\n    choices: [\r\n      { text: 'Choice 1 - \"Examine the contents of the desk drawer.\"', nextSceneIndex: 1},\r\n      { text: 'Choice 2 - \"Carefully look under the couch for any hidden items or clues\"', nextSceneIndex: 3 },\r\n      { text: 'Choice 3 - \"Take a nap, wait for a miracle. DAMAGE\"', nextSceneIndex: 2, damage: 20 },\r\n    ],\r\n  },\r\n  {\r\n    description: 'Scene 2 in Room 1 Watch <br> \"A watch... hmmm, I bet this is somehow important.\"',\r\n    image: '/images/watch.jpg',\r\n    choices: [\r\n      { text: 'GO to Main Room', nextSceneIndex: 0 },\r\n            \r\n    ],\r\n  },\r\n  {\r\n    description: 'Scene 3 in Room 1 DEAD <br> \"Still waiting to be found....\"',\r\n    image: '/images/skeleton.jpg',\r\n    choices: [\r\n      { text: 'GO to Main Room', nextSceneIndex: 0 },\r\n            \r\n    ],\r\n  },\r\n  {\r\n    description: 'Scene 4 in Room 1 KEY <br> \"FOUND IT! That was easy, let\\'s get out of here.\"',\r\n    image: '/images/key.jpg',\r\n    choices: [\r\n      { text: 'GO to Main Room', nextSceneIndex: 0 },\r\n      { text: 'Take the KEY',nextSceneIndex: 2, item: 'Key'},\r\n    ],\r\n  },\r\n];\r\n\r\nexport default TextAdventureGame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}